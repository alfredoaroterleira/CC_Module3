library(ggplot2)
library(dplyr)
library(magrittr)
# Usamos la columna 'PARTIDO' para crear la columna de agrupación de partidos
d_2018 %>%
mutate(party_groups = PARTIDO) -> mi_data_lump_count
# Contamos la cantidad de diputados por partido
mi_data_lump_count %>%
group_by(party_groups) %>%
summarise(n = sum(DIPUTADOS)) %>%
arrange(desc(n)) -> mi_data_count
# Asignamos colores a los partidos
mi_data_count %<>%
mutate(party_color = case_when(
party_groups == "MORENA" ~ "#9E1B32",
party_groups == "PAN" ~ "#1E88E5",
party_groups == "PRI" ~ "#004D2C",
party_groups == "PT" ~ "#D32F2F",
party_groups == "MC" ~ "#FF9800",
party_groups == "PE" ~ "#9C27B0",
party_groups == "PRD" ~ "#FFEB3B",
party_groups == "PV" ~ "#4CAF50",
party_groups == "SP" ~ "#757575"
))
# Creamos una nueva columna para la leyenda con los nombres de los partidos y los diputados entre paréntesis
mi_data_count <- mi_data_count %>%
mutate(legend_label = paste(party_groups, "(", n, " diputados)", sep = ""))
# Preparar los datos para el gráfico (escalado para gráfico semicircular)
mi_data_coord <- parliament_data(
election_data = mi_data_count,
type = "semicircle",
parl_rows = 10,  # Número de escaños por columna
party_seats = mi_data_count$n
)
# Crear el gráfico
mi_data_plot <- mi_data_coord %>%
ggplot(aes(x = x, y = y, colour = party_groups)) +
geom_parliament_seats(size = 3) +  # Tamaño de las bolas
ggtitle("Cámara de Diputados México (2018-2021)") +
coord_fixed() +  # Mantener la proporción correcta
theme_void() +   # Eliminamos ejes, texto y fondos no deseados
theme(
text = element_text(size = 11), # Ajustar tamaño del texto
legend.title = element_blank(),
plot.title = element_text(hjust = 0.3, size = 20), # Centrar título
plot.margin = margin(1, 1, 1, 1, "cm") # Márgenes
) +
scale_colour_manual(
values = mi_data_count$party_color,
limits = mi_data_count$party_groups,
labels = mi_data_count$legend_label  # Aquí agregamos los nombres de los partidos con la cantidad de diputados
) +
guides(colour = guide_legend(title = "Partidos"))  # Título de la leyenda
print(mi_data_plot)
library(tidyverse)
library(forcats)
library(ggparliament)
library(ggplot2)
library(dplyr)
library(magrittr)
# Usamos la columna 'PARTIDO' para crear la columna de agrupación de partidos
d_2018 %>%
mutate(party_groups = PARTIDO) -> mi_data_lump_count
# Contamos la cantidad de diputados por partido
mi_data_lump_count %>%
group_by(party_groups) %>%
summarise(n = sum(DIPUTADOS)) %>%
arrange(desc(n)) -> mi_data_count
# Asignamos colores a los partidos
mi_data_count %<>%
mutate(party_color = case_when(
party_groups == "MORENA" ~ "#9E1B32",
party_groups == "PAN" ~ "#1E88E5",
party_groups == "PRI" ~ "#004D2C",
party_groups == "PT" ~ "#D32F2F",
party_groups == "MC" ~ "#FF9800",
party_groups == "PE" ~ "#9C27B0",
party_groups == "PRD" ~ "#FFEB3B",
party_groups == "PV" ~ "#4CAF50",
party_groups == "SP" ~ "#757575"
))
# Creamos una nueva columna para la leyenda con los nombres de los partidos y los diputados entre paréntesis
mi_data_count <- mi_data_count %>%
mutate(legend_label = paste(party_groups, "(", n, " diputados)", sep = ""))
# Preparar los datos para el gráfico (escalado para gráfico semicircular)
mi_data_coord <- parliament_data(
election_data = mi_data_count,
type = "semicircle",
parl_rows = 10,  # Número de escaños por columna
party_seats = mi_data_count$n
)
# Crear el gráfico
mi_data_plot <- mi_data_coord %>%
ggplot(aes(x = x, y = y, colour = party_groups)) +
geom_parliament_seats(size = 3) +  # Tamaño de las bolas
ggtitle("Cámara de Diputados México (2018-2021)") +
coord_fixed() +  # Mantener la proporción correcta
theme_void() +   # Eliminamos ejes, texto y fondos no deseados
theme(
text = element_text(size = 11), # Ajustar tamaño del texto
legend.title = element_blank(),
plot.title = element_text(hjust = 0.3, size = 20, face = "bold"), # Centrar título
plot.margin = margin(1, 1, 1, 1, "cm") # Márgenes
) +
scale_colour_manual(
values = mi_data_count$party_color,
limits = mi_data_count$party_groups,
labels = mi_data_count$legend_label  # Aquí agregamos los nombres de los partidos con la cantidad de diputados
) +
guides(colour = guide_legend(title = "Partidos"))  # Título de la leyenda
print(mi_data_plot)
ggsave("grafico_2018.png", plot = mi_data_plot, width = 10, height = 7, dpi = 300)
setwd("C:/Users/USUARIO/Documents/GitHub/CC_Module2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
mtcars
qplot(mpg, wt, data=mtcars)
ggplot(mtcars, aes(x = mpg, y = wt))
+ geom_point(shape=1)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=1)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=19)
mtcars$cylFactor <- factor(mtcars$cyl)
ggplot(mtcars, aes(x=mpg,y=wt, shape = cylFactor)) + geom_point()
ggplot(mtcars, aex ( x = mpg, y = wt)) + geom_point(shape=19, colour="blue")
ggplot(mtcars, aes ( x = mpg, y = wt)) + geom_point(shape=19, colour="blue")
ggplot(mtcars, aes(x=mpg,y=wt, color = cyl)) + geom_point(shape=19)
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19)
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + labs(colour = "Cylinders")
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
xlab("Miles per Gallon") +
ylab("Weight") +
labs(colour = "Cylinders") +
ggtitle("Scatterplot")
EuStockDF <- as.data.frame(EuStockMarkets)
EuStockDF
head(EuStockDF)
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) + geom_line()
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) +
geom_line(size = 1.5) +
labs(x = "Stocks")
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) +
geom_line(size = 1.5, colour="light blue") +
labs(x = "Time", y = "Stocks")
head(EuStockDF)
library(dplyr)
dax_smi_plot <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrwo(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") + labs(x = "Time", y = "Stocks")
print(dax_smi_plot)
dax_smi_plot <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") + labs(x = "Time", y = "Stocks")
print(dax_smi_plot)
View(EuStockDF)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
all_stocks <- ggplot()
+ geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue")
all_stocks <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = CAC), size = 1.5, colour = "purple")+
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = FTSE), size = 1.5, colour = "green") +
labs( x = "Time", y = "Stocks")
print(all_Stocks)
all_stocks <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = CAC), size = 1.5, colour = "purple")+
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = FTSE), size = 1.5, colour = "green") +
labs( x = "Time", y = "Stocks")
print(all_stocks)
print(all_stocks)
all_stocks <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1, colour = "red") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = CAC), size = 1, colour = "purple")+
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = FTSE), size = 1, colour = "green") +
labs( x = "Time", y = "Stocks")
print(all_stocks)
legends_stocks <- all_stocs + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")
legends_stocks <- all_stocks + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")
print(legend_stocks)
legend_stocks <- all_stocks + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")
print(legend_stocks)
ggplot(mtcars, aes(x=mpg,y=wt)) + geom_point(shape=19) + geom_smooth(method="lm", se= FALSE, color = "red")
#se = TRUE -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red")
#se = TRUE -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red")
#se = TRUE -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,y=wt, color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red")
ggplot(mtcars,aes(x=mpg,y=wt, color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red") + xlab("Miles per Gallon") + ylab("Weight") + labs(colour= "Cylinders") + ggtitle("Linear Regression")
+ ggtitle("Gaussian Regression")
ggplot(mtcars,aes(x=mpg,y=wt,color= cylFactor))
+ geom_point(shape=19)
ggplot(mtcars,aes(x=mpg,y=wt,color= cylFactor)) +
geom_point(shape=19) +
geom_smooth(method="auto", se= TRUE, color = "red")+
xlab("Miles per Gallon") +
ylab("Weight") +
labs(colour= "Cylinders") +
ggtitle("Gaussian Regression")
head(EuStockDF)
setwd("C:/Users/USUARIO/Documents/GitHub/CC_Module3")
dir.create("/CC_Module3/wordcloud")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "/CC_Module3/wordcloud/churchill_speeches.txt", quiet = TRUE)
dir.create("/file_path/wordcloud")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "/file_path/wordcloud/churchill_speeches.txt", quiet = TRUE)
dir.create("Documents/GitHub/CC_Module3/wordcloud")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "Documents/GitHub/CC_Module3/wordcloud/churchill_speeches.txt", quiet = TRUE)
install.packages("wordcloud")
dir.create("Documents/GitHub/CC_Module3/wordcloud")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "Documents/GitHub/CC_Module3/wordcloud/churchill_speeches.txt", quiet = TRUE)
dir.create("Documents/GitHub/CC_Module3")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "Documents/GitHub/CC_Module3/churchill_speeches.txt", quiet = TRUE)
dir.create("C:/Users/USUARIO/Documents/GitHub/CC_Module3")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "C:/Users/USUARIO/Documents/GitHub/CC_Module3/churchill_speeches.txt", quiet = TRUE)
install.packages("tm")
library(tm)
install.packages("tm")
library(tm)
library(wordcloud)
dir.create("C:/Users/USUARIO/Documents/GitHub/CC_Module3")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "C:/Users/USUARIO/Documents/GitHub/CC_Module3/churchill_speeches.txt", quiet = TRUE)
#Seleccionamos el directorio de forma manual
dirPath <- "C:/Users/USUARIO/Documents/GitHub/CC_Module3"
#Lo cargamos
speech <- Corpus(DirSource(dirPath))
inspect(speech)
library(tm)
library(wordcloud)
dir.create("C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud/churchill_speeches.txt", quiet = TRUE)
#Seleccionamos el directorio de forma manual
dirPath <- "C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud"
#Lo cargamos
speech <- Corpus(DirSource(dirPath))
inspect(speech)
speech <- tm_map(speech, content_transformer(tolower))
speech <- tm_map(speech,removeNumbers)
speech <- tm_map(speech, removeWords, stopwords("english"))
speech <- tm_map(speech, removeWords, c("floccinaucinihilipification", "squirrelled"))
speech <- tm_map(speech, removePunctuation)
speech <- tm_map(speech. stripWhitespace)
speech <- tm_map(speech, stripWhitespace)
#Create a Term Document Matrix
dtm <- TermDocumentMatrix(speech)
#Matrix transformation
m <- as.matrix(dtm)
#Sort it to show the most frequent words
v <- sort(rowSums(m), decreasing=TRUE)
#transform to a data frame
d <- data.frame(word = name(v), freq=v)
#Create a Term Document Matrix
dtm <- TermDocumentMatrix(speech)
#Matrix transformation
m <- as.matrix(dtm)
#Sort it to show the most frequent words
v <- sort(rowSums(m), decreasing=TRUE)
#transform to a data frame
d <- data.frame(word = names(v), freq=v)
head(d,10)
wordcloud(words = d$word, freq = d$freq)
wordcloud(words = d$word, freq = d$freq,
min.freq=1)
wordcloud(words = d$word, freq = d$freq,
min.freq = 1, max.words=250)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
library(tm)
library(wordcloud)
dir.create("C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud/churchill_speeches.txt", quiet = TRUE)
#Seleccionamos el directorio de forma manual
dirPath <- "C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud"
#Lo cargamos
speech <- Corpus(DirSource(dirPath))
inspect(speech)
speech <- tm_map(speech, content_transformer(tolower))
speech <- tm_map(speech,removeNumbers)
speech <- tm_map(speech, removeWords, stopwords("english"))
speech <- tm_map(speech, removeWords, c("floccinaucinihilipification", "squirrelled"))
speech <- tm_map(speech, removePunctuation)
speech <- tm_map(speech, stripWhitespace)
#Create a Term Document Matrix
dtm <- TermDocumentMatrix(speech)
#Matrix transformation
m <- as.matrix(dtm)
#Sort it to show the most frequent words
v <- sort(rowSums(m), decreasing=TRUE)
#transform to a data frame
d <- data.frame(word = names(v), freq=v)
head(d,10)
wordcloud(words = d$word, freq = d$freq)
wordcloud(words = d$word, freq = d$freq,
min.freq=1)
wordcloud(words = d$word, freq = d$freq,
min.freq = 1, max.words=250)
library(RColorBrewer)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
install.packages("RColorBrewer")
library(RColorBrewer)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
install.packages("RColorBrewer")
library(RColorBrewer)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
install.packages("RColorBrewer")
library(RColorBrewer)
library(wordcloud)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
library(wordcloud)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
#install.packages("RColorBrewer")
library(RColorBrewer)
library(wordcloud)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
brewer.pal.info
#install.packages("RColorBrewer")
library(RColorBrewer)
library(wordcloud)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal.info(8, "Dark2"))
#install.packages("RColorBrewer")
library(RColorBrewer)
library(wordcloud)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.fre1 = 1, max.words=250, colors = brewer.pal(8, "Dark2"), random.order = FALSE)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words=250, colors = brewer.pal(8, "Dark2"), random.order = FALSE)
wordcloud(
words = d$word,
freq = d$freq,
min.freq = 1,
max.words = 250,
colors = brewer.pal(8, "Dark2"),
rot.per = 0.35,        # Proporción de palabras rotadas
random.order = FALSE   # Asegura que las palabras más frecuentes estén centradas
)
library(ggplot2)
install.packages("ggradar)
install.packages("ggradar")
install.packages("scales")
install.packages("ggradar")
install.packages("devtools")
install.packages("devtools")
library(tm)
library(wordcloud)
dir.create("C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud")
download.file("https://ibm.box.com/shared/static/cmid70rpa7xe4ocitcga1bve7r0kqnia.txt",
destfile = "C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud/churchill_speeches.txt", quiet = TRUE)
#Seleccionamos el directorio de forma manual
dirPath <- "C:/Users/USUARIO/Documents/GitHub/CC_Module3/wordcloud"
#Lo cargamos
speech <- Corpus(DirSource(dirPath))
inspect(speech)
speech <- tm_map(speech, content_transformer(tolower))
speech <- tm_map(speech,removeNumbers)
speech <- tm_map(speech, removeWords, stopwords("english"))
speech <- tm_map(speech, removeWords, c("floccinaucinihilipification", "squirrelled"))
speech <- tm_map(speech, removePunctuation)
speech <- tm_map(speech, stripWhitespace)
#Create a Term Document Matrix
dtm <- TermDocumentMatrix(speech)
#Matrix transformation
m <- as.matrix(dtm)
#Sort it to show the most frequent words
v <- sort(rowSums(m), decreasing=TRUE)
#transform to a data frame
d <- data.frame(word = names(v), freq=v)
head(d,10)
wordcloud(words = d$word, freq = d$freq)
wordcloud(words = d$word, freq = d$freq)
wordcloud(words = d$word, freq = d$freq,
min.freq=1)
wordcloud(words = d$word, freq = d$freq,
min.freq = 1, max.words=250)
#install.packages("RColorBrewer")
library(RColorBrewer)
library(wordcloud)
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words = 250, colors = brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1, max.words=250, colors = brewer.pal(8, "Dark2"), random.order = FALSE)
library(ggplot2)
library(ggradar)
install_github("ricardo-bion/ggradar", dependencies = TRUE)
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
library(ggplot2)
library(ggradar)
library(dplyr)
library(scales)
mtcars
#Select our dataset
mtcars %>%
#atribute rownames to a variable
add_rownames( var = "group") %>%
#assign each varaible -- car names -- to their related variables
mutate_each(funs(rescale), -group) %>%
#select which data to plot
head(3) %>% select(1:10) -> mtcars_radar
library(ggplot2)
library(ggradar)
library(dplyr)
library(scales)
library(tibble)
#Select our dataset
mtcars %>%
#atribute rownames to a variable
add_rownames( var = "group") %>%
#assign each varaible -- car names -- to their related variables
mutate(across(where(is.numeric), rescale)) %>%
#select which data to plot
head(3) %>% select(1:10) -> mtcars_radar
#this code will generate lots of warning, so let's supress them
options(warn=-1)
ggradar(mtcars_radar)
View(mtcars)
ggradar(mtcars_radar)
install.packages("waffle")
library(ggplot2)
library(waffle)
expenses <- c('Health ($43,212)' = 43212,
'Education ($113,412)' = 113412,
'Transportation ($20,231') = 20231,
expenses <- c('Health ($43,212)' = 43212,
'Education ($113,412)' = 113412,
'Transportation ($20,231)' = 20231,
'Entertainment ($28,145)' = 28145)
waffle(expenses/1235, rows=5, size=0.3,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
titel="Imaginary Household Expenses Each Year",
xlab = "1 square = $934")
waffle(expenses/1235, rows=5, size=0.3,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
title="Imaginary Household Expenses Each Year",
xlab = "1 square = $934")
IRkernel::set_plot_options(width=950, height=600, units='px')
IRkernel::set_plot_options(width=950, height=600, units='px')
devtools::install_github("IRkernel/IRkernel")
IRkernel::set_plot_options(width=950, height=600, units='px')
IRkernel::options(repr.plot.width = 9.5, repr.plot.height = 6)
#Debos instalar lo siguiente
#devtools::install_github("IRkernel/IRkernel")
IRkernel::set_plot_options(width=950, height=600, units='px')
library(ggplot2)
library(ggradar)
library(dplyr)
library(scales)
library(tibble)
mtcars
#Select our dataset
mtcars %>%
#atribute rownames to a variable
add_rownames( var = "group") %>%
#assign each varaible -- car names -- to their related variables
mutate(across(where(is.numeric), rescale)) %>%
#select which data to plot
head(3) %>% select(1:10) -> mtcars_radar
#this code will generate lots of warning, so let's supress them
options(warn=-1)
ggradar(mtcars_radar)
#Debos instalar lo siguiente
#devtools::install_github("IRkernel/IRkernel")
IRkernel::set_plot_options(width=950, height=600, units='px')
#making the results reproducible
set.seed(1234)
set_a <- rnorm(200, mean=1, sd=2)
set_b <- rnorm(200, mean=0, sd=1)
#create the data frame
df <- data.frame(label = factor(rep(c("A","B"), each=200)), value = c(set_a,set_b))
head(df)
tail(df)
library(ggplot2)
library(plotly)
ggplot(df, aes(x=label, y=value)) + geom_boxplot()
ggplotly()
View(df)
summary(mtcars)
qplot(factor(cyl), mpg, data = mtcars, geom = "boxplot")
cars <- ggplot(mtcars, aes(factor(cyl), mpg))
cars + geom_boxplot
cars <- ggplot(mtcars, aes(factor(cyl), mpg))
cars + geom_boxplot()
